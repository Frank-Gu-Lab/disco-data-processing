    dfs = sorted(glob.glob(merge_path + "/input/clean_neg_input/*"), key=lambda x : int(os.path.basename(x)[6:-5]))

    for i in range(len(dfs)):
        
        try: # ppm in index
            # Preserve multi-index when reading in Excel file
            df = pd.read_excel(dfs[i], header = [0, 1], index_col=[0, 1, 2, 3]).iloc[:, :2]
            df_other = pd.read_excel(dfs[i], header = [0, 1], index_col=[0, 1, 2, 3]).iloc[:, 2:].droplevel(1, axis=1)
            df_other.columns = pd.MultiIndex.from_product([df_other.columns, ['']])
            dfs[i] = pd.merge(df, df_other, left_on=("concentration", "sat_time", "proton_peak_index", "ppm"), right_on=("concentration", "sat_time", "proton_peak_index", "ppm"))

        except: # ppm in column
            # Preserve multi-index when reading in Excel file
            df = pd.read_excel(dfs[i], header = [0, 1], index_col=[0, 1, 2]).iloc[:, :4]
            df_other = pd.read_excel(dfs[i], header = [0, 1], index_col=[0, 1, 2]).iloc[:, 4:].droplevel(1, axis=1)
            df_other.columns = pd.MultiIndex.from_product([df_other.columns, ['']])
            dfs[i] = pd.merge(df, df_other, left_on=("concentration", "sat_time", "proton_peak_index"), right_on=("concentration", "sat_time", "proton_peak_index"))

    polymer_list = ['CMC', 'CMC_ours', 'HEMAcMPC', 'HPMCE3', 'HPMCE4M', 'KHA', 'PAA', 'PDMA', 'PDMAcd', 'pDMAMPC5050', 'pDMASBT', 'PEGHCO', 'pHEMAMPC2080', 'pHEMAMPC8020', 'pHEMASBT5050', 'pMPC', 'pMPC_ours', 'pSBT', 'PTA']
    
    # call function --> original list is modified (mutable)
    clean(dfs, polymer_list, False)        
    
    # recreate output list
    expected_dfspaths = sorted(glob.glob(merge_path + "/expected/clean_neg_output/*"), key=lambda x : int(os.path.basename(x)[6:-5]))
    expected_dfs = [pd.read_excel(df, index_col=[0, 1, 2, 3]) for df in expected_dfspaths]

    # compare
    assert len(dfs) == len(expected_dfs)
    
    for i in range(len(dfs)):
        pd.testing.assert_frame_equal(dfs[i], expected_dfs[i])